name: Build and Release Docker Images

on:
  workflow_dispatch:
  release:
    types: [created]
  schedule:
    - cron: '0 2 * * *' # 每天 02:00 执行
      timezone: Asia/Shanghai # 设置时区为中国

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 关键权限

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Process Docker Images
        id: process_images
        run: |
          mkdir -p output
          python - <<EOF
          import yaml
          import os
          import subprocess
          import hashlib
          
          # 读取配置文件
          with open('docker-images.yml', 'r') as file:
              config = yaml.safe_load(file)
          
          # 处理每个镜像组
          for group_name, images in config['image_groups'].items():
              print(f"Processing group: {group_name}")
              
              # 拉取镜像
              for image in images:
                  print(f"Pulling image: {image}")
                  subprocess.run(["docker", "pull", image], check=True)
              
              # 保存镜像到tar.gz
              output_file = f"output/{group_name}.tar.gz"
              save_cmd = ["docker", "save"] + images
              
              with open(output_file, 'wb') as f:
                  save_process = subprocess.Popen(save_cmd, stdout=subprocess.PIPE)
                  gzip_process = subprocess.Popen(["gzip"], stdin=save_process.stdout, stdout=f)
                  save_process.stdout.close()  # 允许save_process在pipe关闭时接收SIGPIPE
                  gzip_process.communicate()
              
              # 计算MD5
              md5_hash = hashlib.md5()
              with open(output_file, 'rb') as f:
                  for chunk in iter(lambda: f.read(4096), b""):
                      md5_hash.update(chunk)
              
              md5_value = md5_hash.hexdigest()
              
              # 为每个分组创建独立的MD5文件
              with open(f"output/{group_name}.md5", 'w') as group_md5_file:
                  group_md5_file.write(f"{md5_value}")
              

              print(f"Generated {output_file} with MD5: {md5_value}")
          

          print("All docker images processed successfully!")
          EOF

      - name: Upload to GitHub Releases
        uses: softprops/action-gh-release@v1
        with:
          files: |
            output/*.tar.gz
            output/*.md5
          tag_name: latest              # 指定上传到 latest 标签
